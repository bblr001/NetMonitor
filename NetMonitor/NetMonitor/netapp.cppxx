#include "stdafx.h"
#include "netapp.h"
#include <stdio.h>
#include "pcap.h"
#include "MsgFIFO.h"
/*
 * app name/banner
 */ 
void print_app_banner (void)
{
 
 /* printf ("%s - %s\n", APP_NAME, APP_DESC);
  printf ("%s\n", APP_COPYRIGHT);
  printf ("\n");*/
 
  return;
}
 
/*
 * print help text
 */
void print_app_usage (void)
{
 
 /* printf ("Usage: %s [interface]\n", APP_NAME);
  printf ("\n");
  printf ("Options:\n");
  printf ("    interface    Listen on <interface> for packets.\n");
  printf ("\n");*/
 
  return;
}
 
/*
 * print data in rows of 16 bytes: offset   hex   ascii
 *
 * 00000   47 45 54 20 2f 20 48 54  54 50 2f 31 2e 31 0d 0a   GET / HTTP/1.1..
 */
 
void print_hex_ascii_line (const u_char * payload, int len, int offset, CString &cstr)
{
	char hexarr[3] = {0};
	char asciichar ;
	int i;
	int gap;
	const u_char *ch;
	//CString cstr = "";
#if 0 
	/* offset */
	printf ("%05d   ", offset);
#endif
#if 0
	/* hex */
	ch = payload;
	for (i = 0; i < len; i++)
	{
		//printf ("%02x ", *ch);
		sprintf(hexarr, "%02x", *ch);
		cstr.Append(hexarr);
		cstr.Append(" ");
		ch++;
			/* print extra space after 8th byte for visual aid */
		if (i == 7)
			//printf (" ");
			cstr.Append(" ");
	}
	/* print space to handle line less than 8 bytes */
	if (len < 8)
		//printf (" ");
		cstr.Append(" ");
 
	/* fill hex gap with spaces if not full line */
	if (len < 16)
	{
		gap = 16 - len;
		for (i = 0; i < gap; i++)
		{
			//printf ("   ");
			cstr.Append("   ");
		}
	}
	//printf ("   ");
	cstr.Append("   ");
#endif
	/* ascii (if printable) */
	ch = payload;
	for (i = 0; i < len; i++)
	{
		if (isprint (*ch))
		{
			//printf ("%c", *ch);
			//sprintf(&asciichar, "%c", *ch);
			cstr.AppendChar(*ch);
		}
		else
			//printf (".");
			cstr.AppendChar('.');
		ch++;
	}
 
	//printf ("\n");
	//cstr.AppendChar('\n');

	//OutputDebugString(cstr);
	return;
}
 
/*
 * print packet payload data (avoid printing binary data)
 */ 
void print_payload (const u_char * payload, int len, CString &cstr)
{
 
	int len_rem = len;
	int line_width = 16;		/* number of bytes per line */
	int line_len;
	int offset = 0;		/* zero-based offset counter */
	const u_char *ch = payload;
 
	if (len <= 0)
	return;
 
	/* data fits on one line */
	if (len <= line_width)
	{
		print_hex_ascii_line (ch, len, offset, cstr);
		return;
	}
 
	/* data spans multiple lines */
	for (;;)
	{
		/* compute current line length */
		line_len = line_width % len_rem;
		/* print line */
		print_hex_ascii_line (ch, line_len, offset, cstr);
		/* compute total remaining */
		len_rem = len_rem - line_len;
		/* shift pointer to remaining bytes to print */
		ch = ch + line_len;
		/* add offset */
		offset = offset + line_width;
		/* check if we have line width chars or less */
		if (len_rem <= line_width)
		{
			/* print last line and get out */
			print_hex_ascii_line (ch, len_rem, offset, cstr);
			break;
		}
	}
 
	return;
}
 
/*
 * dissect/print packet
 */
void got_packet (u_char * args, const struct pcap_pkthdr *header, const u_char * packet)   
{
 
	static int count = 1;		/* packet counter */
 
	/* declare pointers to packet headers */
	const struct sniff_ethernet *ethernet;	/* The ethernet header [1] */
	const struct sniff_ip *ip;	/* The IP header */
	const struct sniff_tcp *tcp;	/* The TCP header */
	const struct sniff_udp *udp;	/* The UDP header */
	const u_char *payload;		/* Packet payload */
 
	int size_ip;
	int size_tcp;
	int size_payload;
	time_t local_tv_sec;
	struct tm *ltime;
	char timestr[16] = {0};
	CString cstr = "";
	u_short srcport = 0;
	u_short dstport = 0;
	/*
	 * unused parameter
	 */
	(VOID)(args);

	printf ("\nPacket number %d:\n", count);
	count++;
	
	local_tv_sec = header->ts.tv_sec;
	ltime=localtime(&local_tv_sec);
	strftime( timestr, sizeof timestr, "%H:%M:%S", ltime);
	cstr.AppendFormat("%s \t", timestr);
	
	/* define ethernet header */
	ethernet = (struct sniff_ethernet *) (packet);
 
	/* define/compute ip header offset */
	ip = (struct sniff_ip *) (packet + SIZE_ETHERNET);
	size_ip = IP_HL (ip) * 4;
	if (size_ip < 20)
	{
		printf ("   * Invalid IP header length: %u bytes\n", size_ip);
		return;
	}
 
	/* print source and destination IP addresses */
	printf ("       From: %s\n", inet_ntoa (ip->ip_src));
	printf ("         To: %s\n", inet_ntoa (ip->ip_dst));
	//cstr.AppendFormat("%s -> %s\t", inet_ntoa (ip->ip_src), inet_ntoa (ip->ip_dst));
	char *srcip = inet_ntoa (ip->ip_src);
	char *dstip = inet_ntoa (ip->ip_dst);
	/* determine protocol */
	switch (ip->ip_p)
	{
	case IPPROTO_TCP:
		printf ("   Protocol: TCP\n");
		break;
	case IPPROTO_UDP:
		printf ("  ************* Protocol: UDP *************\n");
		break;
	//return;
	case IPPROTO_ICMP:
		printf ("   Protocol: ICMP\n");
		return;
	case IPPROTO_IP:
		printf ("   Protocol: IP\n");
		return;
	default:
		printf ("   Protocol: unknown\n");
		return;
	}
 
	/*
	*  This packet is TCP.
	*/
	if (ip->ip_p == IPPROTO_TCP)
	{
		/* define/compute tcp header offset */
		tcp = (struct sniff_tcp *) (packet + SIZE_ETHERNET + size_ip);
		size_tcp = TH_OFF (tcp) * 4;
		if (size_tcp < 20)
		{
			printf ("   * Invalid TCP header length: %u bytes\n", size_tcp);
			return;
		}
 
		printf ("   Src port: %d\n", ntohs (tcp->th_sport));
		printf ("   Dst port: %d\n", ntohs (tcp->th_dport));
		srcport = 	ntohs (tcp->th_sport);
		dstport =   ntohs (tcp->th_dport);
			/* define/compute tcp payload (segment) offset */
		payload = (u_char *) (packet + SIZE_ETHERNET + size_ip + size_tcp);
 
			/* compute tcp payload (segment) size */
		size_payload = ntohs (ip->ip_len) - (size_ip + size_tcp);
 
		/*
		* Print payload data; it might be binary, so don't just
		* treat it as a string.
		*/
		cstr.AppendFormat("%s:%d -> %s:%d =>\t", srcip, srcport, dstip, dstport);
		if (size_payload > 0)
		{
			printf ("   Payload (%d bytes):\n", size_payload);
			print_payload (payload, size_payload, cstr);
		}
	}				//end tcp
 
	/*
	*  This packet is UDP.
	*/
	else if (ip->ip_p == IPPROTO_UDP)
	{
		/* define/compute udp header offset */
		udp = (struct sniff_udp *) (packet + SIZE_ETHERNET + size_ip);
		printf ("   Src port: %d\n", ntohs (udp->sport));
		printf ("   Dst port: %d\n", ntohs (udp->dport));
		printf ("udp length:%d\n", ntohs (udp->udp_length));
		printf ("udp sum:%d\n", ntohs (udp->udp_sum));

		srcport = 	ntohs (udp->sport);
		dstport =   ntohs (udp->dport);
			/* define/compute udp payload (segment) offset */
		payload = (u_char *) (packet + SIZE_ETHERNET + size_ip + 8);
		size_payload = ntohs (ip->ip_len) - (size_ip + 8);
		
		cstr.AppendFormat("%s:%d -> %s:%d =>\t", srcip, srcport, dstip, dstport);
		/*
		* Print payload data; it might be binary, so don't just
		* treat it as a string.
		*/
		if (size_payload > 0)
		{
			printf ("   Payload (%d bytes):\n", size_payload);
			print_payload (payload, size_payload,cstr);
		}
 
	}//end udp
	cstr.AppendChar('\n');
	CFIFO::GetInstance()->Write(cstr.GetString());
	return;
 }